/// Returns a unitless integer equivalent of a measurement.
/// @param {Pixels | Em | Percentage} $n - A measurement of any kind.
/// @return {Integer} Integer equivalent of `$n`.
/// @example
/// parseInt(16px)
/// // 16
/// @link http://hugogiraudel.com/2013/03/18/ultimate-rem-mixin/
@function parseInt($n) {
	@return $n / ($n * 0 + 1);
}

/// Converts a target value in pixels to its associated value in rems based on the $baseFontSize.
/// @param {Integer | Pixels | List} $target - The target size in either pixels or its integer equivalent.
/// @return {Rem} The target's value in rems based on the `$baseFontSize`.
/// @example
/// rem(12)
/// // 0.75em
/// @example
/// rem(12 16)
/// // 0.75em 1em
@function rem($target) {

	$output: null;

	@if type-of($target) == list {

		$output: unquote('') !default;

		@each $value in $target {
			$value: rem($value);

			$output: append($output, $value);
		}
	}
	@else {
		$target: parseInt($target);

		$output: ($target / $baseFontSize) * 1rem;
	}

	@return $output;
}